<span>
<span id="tooltip"></span>
<style>
  span#tooltip{
    position: absolute;
    z-index: 10;
    visibility: hidden;
    padding: 0 5px;
    border: 1px solid #000;
    border-radius: 3px;
    background-color: #333;
    color: #fff;
    font-size: 11px;
    opacity: 0.8;
  }
</style>
<%= javascript_tag do %>
  /***********************
   * Initialize
   ***********************/
   var nodes = <%= @books.to_json.html_safe %>;
   var links = <%= @links.to_json.html_safe %>;
   var w = 800;
   var h = 600;

  /**********************
   * Functions
   **********************/
function calc_intersection(x1, y1, x2, y2, r) {
  var l = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  var p1x = ((l - r) * x1 + r * x2) / l;
  var p1y = ((l - r) * y1 + r * y2) / l;
  var p2x = (r * x1 + (l - r) * x2) / l;
  var p2y = (r * y1 + (l - r) * y2) / l;
  var p1 = [p1x, p1y];
  var p2 = [p2x, p2y];
  return [p1, p2];
}

function render_graph(nodes,links) {
   var force = d3.layout.force()
                 .nodes(nodes)
                 .links(links)
                 .size([w, h])
                 .linkStrength(0.1)
                 .friction(0.9)
                 .linkDistance(200)
                 .charge(-200)
                 .gravity(0.1)
                 .theta(0.8)
                 .alpha(0.1)
                 .start();

    var svg = d3.select("span").append("svg").attr({width:w, height:h});
    var marker = svg.append("defs").append("marker")
        .attr({
          'id': "arrowhead",
          'refX': 0,
          'refY': 10,
          'markerWidth': 20,
          'markerHeight': 20,
          'orient': "auto"
        })
      marker.append("path")
        .attr({
          d: "M 0,0 V 20 L20,10 Z",
          fill: "Maroon"
        })

    var g = svg.selectAll("g")
                  .data(nodes)
                  .enter()
                  .append("g")
                  .call(force.drag);

    var node = g.append("image")
                  .attr({"xlink:href": function(d) {
                          return d.image;
                         },
                         "width":75,
                         "height":60,
                         "transform":"translate(-37.5,-30)"
                        })
                  .on("mouseover", function(d) {
                    $("#tooltip").css("visibility", "visible")
                                 .text(d.title)
                                 .css("top", d.y + 120)
                                 .css("left", d.x);
                  })
                  .on("mouseout", function(d) {
                    $("#tooltip").css("visibility", "hidden");
                  });
                  /*
                  .on("click", function(d) {
                    if (d.url) {
                      window.open(d.url);
                    };
                  });
                  */

    var link = svg.selectAll("line")
                  .data(links)
                  .enter()
                  .append("line")
                  .style({"stroke": "#ccc",
                          "stroke-width": 1,
                          "marker-end":"url(#arrowhead)",
                         });

    force.on("tick", function() {
      var r = 40;
      link.attr({x1: function(d) { return d.source.x; },
                 y1: function(d) { return d.source.y; },
                 x2: function(d) { return calc_intersection(d.source.x, d.source.y, d.target.x, d.target.y, r)[1][0]; },
                 y2: function(d) { return calc_intersection(d.source.x, d.source.y, d.target.x, d.target.y, r)[1][1]; }
                });
      g.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    });
};
  /***********************
   * MAIN
   ***********************/
  render_graph(nodes, links);

<% end %>
</span>
